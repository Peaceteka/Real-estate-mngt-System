generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String
  name      String?
  role      Role       @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  tenants   Tenant[]
  clients   Client[]
  payments  Payment[]
}

model Client {
  id           String   @id @default(uuid())
  firstName    String
  lastName     String
  email        String   @unique
  phone        String?
  address      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  user         User     @relation(fields: [userId], references: [id])
  properties   Property[]
  transactions Transaction[]
}

model Property {
  id           String        @id @default(uuid())
  title        String
  description  String?
  type         PropertyType
  status       PropertyStatus @default(AVAILABLE)
  price        Float
  address      String
  bedrooms     Int?
  bathrooms    Int?
  area         Float?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  clientId     String
  client       Client        @relation(fields: [clientId], references: [id])
  transactions Transaction[]
  units        Unit[]
}

model Transaction {
  id         String            @id @default(uuid())
  type       TransactionType
  status     TransactionStatus @default(PENDING)
  amount     Float
  date       DateTime
  notes      String?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  clientId   String
  client     Client           @relation(fields: [clientId], references: [id])
  propertyId String
  property   Property         @relation(fields: [propertyId], references: [id])
}

enum Role {
  ADMIN
  USER
}

enum PropertyType {
  HOUSE
  APARTMENT
  CONDO
  LAND
  COMMERCIAL
}

enum PropertyStatus {
  AVAILABLE
  SOLD
  RENTED
  UNDER_CONTRACT
  OFF_MARKET
}

enum TransactionType {
  SALE
  RENTAL
  LEASE
}

enum TransactionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Unit {
  id          String     @id @default(uuid())
  number      String     // Unit number or identifier
  property    Property    @relation(fields: [propertyId], references: [id])
  propertyId  String
  tenant      Tenant?    // Optional tenant (unit might be vacant)
  rentAmount  Float
  status      UnitStatus @default(VACANT)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Tenant {
  id          String     @id @default(uuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  unit        Unit       @relation(fields: [unitId], references: [id])
  unitId      String     @unique
  startDate   DateTime
  endDate     DateTime?
  payments    Payment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Payment {
  id          String     @id @default(uuid())
  tenant      Tenant     @relation(fields: [tenantId], references: [id])
  tenantId    String
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  amount      Float
  type        PaymentType
  status      PaymentStatus @default(PENDING)
  receiptUrl  String?
  paidAt      DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum UnitStatus {
  VACANT
  OCCUPIED
  MAINTENANCE
}

enum PaymentType {
  RENT
  DEPOSIT
  MAINTENANCE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}
